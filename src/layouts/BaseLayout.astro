---
import { cn } from "../utils/cn";
import "../style/global.css";
import { ClientRouter } from "astro:transitions";

import { LightModeIcon, DarkModeIcon, SystemModeIcon } from "../assets/themes";
import { getTheme } from "../utils/theme";

const socialLinks = [
  { href: "https://github.com/t3dotgg", label: "GitHub" },
  { href: "https://twitter.com/theo", label: "Twitter" },
  { href: "https://twitch.tv/theo", label: "Twitch" },
  { href: "https://discord.gg/xHdCpcPHRE", label: "Discord" },
];

const themeToggles = [
  { id: "system", icon: SystemModeIcon },
  { id: "light", icon: LightModeIcon },
  { id: "dark", icon: DarkModeIcon },
];

interface Props {
  title: string;
  description: string;
  classNames?: {
    html?: string;
    body?: string;
    main?: string;
    footer?: string;
  };
  backToLink?:
    | false
    | {
        text: string;
        href: string;
      };
}

const defaultBackToLink: Props["backToLink"] = {
  text: "back to theo's site",
  href: "/",
};

const {
  title,
  description,
  classNames,
  backToLink = defaultBackToLink,
} = Astro.props;
const isHomepage = Astro.url.pathname === "/";
---

<html lang="en" class={cn("bg-white dark:bg-black h-full", classNames?.html)}>
  <head>
    <ClientRouter />
    <script>
      import { setUpClientThemeScripts } from "../utils/theme";
      setUpClientThemeScripts();
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="twitter:image" content="https://t3.gg/images/twitter.png" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content="@t3dotgg" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://t3.gg/images/twitter.png" />
    <title>{title}</title>
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="black" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="white" />

    <script defer data-domain="astro.t3.gg" src="/js/script.js"></script>
  </head>
  <body class={cn("min-h-full", classNames?.body)}>
    <main class={cn("flex min-h-screen flex-col text-foreground", classNames?.main)}>
      <slot />
      {
        !isHomepage && backToLink && (
          <aside class="text-center">
            <a
              href={backToLink.href}
              class="mt-8 -mb-4 inline-flex items-center justify-center gap-1 p-2 text-gray-600 dark:text-gray-400 hover:text-foreground hover:underline"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width={2}
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"
                />
              </svg>
              {backToLink.text}
            </a>
          </aside>
        )
      }
      <footer
        class={cn("border-t border-foreground/10 py-8 mt-8", classNames?.footer)}
      >
        <div class="container mx-auto px-4">
          <div class="mb-4 flex justify-center space-x-6">
            {
              socialLinks.map((link) => (
                <a
                  href={link.href}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="transition-colors ease-out text-gray-600 dark:text-gray-400 hover:text-foreground"
                >
                  {link.label}
                </a>
              ))
            }
          </div>
          <div class="text-center">
            <div
              class="theme-toggle-group inline-flex items-center gap-2 rounded-full border border-foreground/10 p-1"
            >
              {
                themeToggles.map((toggle) => {
                  return (
                    <div class={cn("theme-icon", `theme-icon-${toggle.id}`)}>
                      <button
                        type="button"
                        class="grid place-items-center size-8 rounded-full p-1.75"
                        aria-label={`Set theme to ${toggle.id}`}
                        data-theme-toggle={toggle.id}
                      >
                        <div class="pointer-events-none contents">
                          <toggle.icon class="size-1" />
                        </div>
                      </button>
                    </div>
                  );
                })
              }
            </div>
          </div>
        </div>
      </footer>
    </main>
  </body>
</html>

<style>
  @reference "../style/global.css";
  @variant system {
    button[data-theme-toggle="system"] {
      @apply bg-foreground/10 ;
    }
  }
  @variant explicit-light {
    button[data-theme-toggle="light"] {
      @apply bg-foreground/10 ;
    }
  }
  @variant explicit-dark {
    button[data-theme-toggle="dark"] {
      @apply bg-foreground/10 ;
    }
  }
</style>
</style>